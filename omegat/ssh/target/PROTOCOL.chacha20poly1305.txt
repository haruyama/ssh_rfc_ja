この文書は OpenSSH でサポートされる  chacha20-poly1305@openssh.com 認証付き暗号について記述する.

背景
----------

ChaCha20 は Daniel Bernstein によって設計されたストリーム暗号で [1] で記述された. 128 ビットの固定ビットと128 ないし 256 ビットの鍵, 64 ビットのナンス, 64ビットのカウンターを 64 ビットの出力に変換することで動作する. この出力は鍵ストリームとして利用され, 利用していないバイト列は単に捨てられる.

Poly1305[2] は, こちらも Daniel Bernstein によるもので, メッセージと使い捨ての 256 ビット秘密鍵から 126 ビットの完全性タグを計算する, 1回限りの Carter-Wegman MAC だ.

chacha20-poly1305@openssh.com は この2つを組合せて認証付き暗号モードとする. この構成は [3] で Adam Langely が TLS 向けに提案したものを基にしている. しかし, MAC に渡すデータのレイアウトとパケット長の暗号化を追加している点が異なる.

ネゴシエーション
-----------

chacha20-poly1305@openssh.com は暗号化と認証の両方を提供する. このため, 分離された MAC は必要ない. chacha20-poly1305@openssh.com 暗号が鍵交換で選択されたら, 提供された MAC アルゴリズムは無視され, MAC についての交渉は必要がない.

詳細な構成
---------------------

chacha20-poly1305@openssh.com 暗号は SSH 鍵交換からの出力として 512 ビットの鍵の素材を必要とする. これは 2つ の 256 ビット鍵  (K_1 と K_2) を構成し, chacha20 の 2 つの別のインスタンスで使われる.
最初の 256 ビットが K_2 を構成し, 次の 256 ビットが K_1 となる.

K_1 を鍵に使うインスタンスは, 4バイトの packet length フィールドの暗号化にのみ用いるストリーム暗号だ. K_2 を鍵に用いる 2番目のインスタンスは poly1305 と一緒に利用され,  パケット全体を暗号化し認証するために使われる AEAD (Authenticated Encryption with Associated Data) を構成する.

2つの別々の暗号インスタンスを使うことで, パケット長を秘密に保つが, MAC をチェックする前にパケット長を復号し用いてパケットのペイロードの暗号に対するオラクルを作らないようにする. 長さを暗号化する独立した鍵のインスタンスを用いることで, (鍵の導出や ChaCha20, Poly1305 が安全だと仮定すると), 復号オラクルとしてパケットの入力処理を利用しようと探す能動的な攻撃者にペイロードの内容やその MAC についての情報を与えない.

AEAD は次のように構成される: それぞれのパケットに対して, K_2 を用いて生成された ChaCha20 ストリーム出力の 最初の 256 ビットを取って Poly1305 鍵を作成し, SSH ワイヤエンコーディングルールの uint64 でエンコードされたパケットシーケンス番号と 0 の ChaCha20 のブロックカウンターから IV が生成される. そして K_2 ChaCha20 のブロックカウンターは, リトルエンディアンエンコーディングの1 (すなわち {1, 0, 0, 0, 0, 0, 0, 0}) に設定され, このインスタンスがパケットのペイロードの暗号化に用いられる.

パケットの処理
---------------

パケットを受け取ったら, 長さを最初に復号しなければならない. 4バイトの暗号文を受け取ったら, 平文の長さを取得するために,  K_1 鍵と  SSH ワイヤエンコーディングルールの uint64 でエンコードされたパケットのシーケンス番号と 0 ブロックカウンターを用いて, 暗号文を復号する.

全体のパケットを受け取ったら 1度 MAC を復号前に検査しなければならない. パケットごとの Poly1305 鍵を前述のように生成し, 暗号文のパケット長とペイロードを一緒にしたものに対してこの鍵を使い Poly1305 を用いて MAC タグを計算する. 計算された MAC をパケットに追加されたものと定数時間で比較し,  (K_2, ナンスとしてのパケットシーケンス番号と 1で始まるブロックカウンターを用いて) 前述のように ChaCha20 を用いてパケットを復号する.

パケットを送信する際, 最初に 4バイトの長さをエンコードし K_1 を用いて暗号化する. (K_2 を用いて) パケットのペイロードを暗号化し, 暗号化されたパケット長の後に追加する. 最後に MAC タグを計算し追加する.

鍵の再生成
--------

ChaCha20 は 決して暗号化のために {key, nonce} を再利用したり 同じ {key, nonce} で 2^70 バイトより多く暗号化してはならない. SSH トランスポートプロトコル (RFC4253) は,  もっと保守的な 1GB のデータの送信ないし受信ごとの鍵の再生成を推奨している. この推奨に従っていれば chacha20-poly1305@openssh.com はこの領域での特別な処理は必要がない.

リファレンス
----------

[1] "ChaCha, a variant of Salsa20", Daniel Bernstein
    http://cr.yp.to/chacha/chacha-20080128.pdf

[2] "The Poly1305-AES message-authentication code", Daniel Bernstein
    http://cr.yp.to/mac/poly1305-20050329.pdf

[3] "ChaCha20 and Poly1305 based Cipher Suites for TLS", Adam Langley
    http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03

$OpenBSD: PROTOCOL.chacha20poly1305,v 1.5 2020/02/21 00:04:43 dtucker Exp $

