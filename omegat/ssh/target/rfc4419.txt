





Network Working Group                                          M. Friedl
Request for Comments: 4419                                     N. Provos
Category: Standards Track                                     W. Simpson
                                                              March 2006


                   セキュア シェル (SSH) トランスポート層プロトコルのための Diffie-Hellman Group Exchange

このメモの位置づけ

   この文書は, インターネットコミュニティに対するインターネットの標準トラックプロトコルを定義している. また, 改善のための議論と示唆を求めているこのプロトコルの標準化の状態と状況は "Internet
   Official Protocol Standards" (STD 1) の現在の版を参照してほしい.  このメモの配布は制限しない.

Copyright Notice

   Copyright (C) The Internet Society (2006). 訳者: 春山 征吾 <haruyama@unixuser.org> 

概要

   このメモは, セキュア シェル （ＳＳＨ） プロトコルのための 新しい鍵交換法を記述している.  SSHのサーバとクライアントが Diffie-Hellman 鍵交換をするための新しい群を提案します.  この提案された群は固定される必要はなく時間とともに変化できます.

1.  概要と原理

   SSH [RFC4251] は, インターネットでの安全なリモートログインのための非常に一般的なプロトコルだ.  現在, SSHは "diffie-hellman-group1-sha1" 法 [RFC4253] を用いて最初の鍵交換をしている.  この方法は, すべての操作を固定された群の上で実行するよう規定しています.

   Diffie-Hellman 鍵交換は, 一方の側だけでは決定できない共有の秘密を提供する.  さらに, 共有の秘密は参加している当事者のみがわかる.  SSHでは, 鍵交換は, ホスト認証を提供するホスト鍵で署名されている.

   Diffie-Hellman 鍵交換のセキュリティは, 離散対数問題 (DLP) が容易に解けないことに基づいている.  将来何年にも渡って SSHプロトコルが利用されることを期待しているので, 固定された群に対する広範囲の事前計算と群の上の離散対数を計算するより効率的なアルゴリズムが, SSH プロトコルのセキュリティの脅威になることを恐れている.





Friedl, et al.              Standards Track                     [Page 1]
 
RFC 4419                 SSH DH Group Exchange                March 2006


   新しい群を提案できると, 離散対数のより効率的な計算のために事前処理をする動機を減らすことができる.  サーバはバックグラウンドで常に新しい群を計算できる.

2.  Requirements Notation

   この文書でのキーワード "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",  "OPTIONAL" は, [RFC-2119] で記述されているように解釈される. 

3.  Diffie-Hellman 群と鍵交換

   サーバは, サーバが選択できる安全な素数のリストと対応する生成器を保持する.  素数 p が安全とは, p = 2q + 1 な q が素数の場合だ.  バックグラウンドで新しい素数は生成できる.

   生成器 g は生成される部分群のオーダーが小さい素数に因数分解できないように選ぶ必要がある. つまり p = 2q + 1 のとき, オーダーは q か p-1 のどちらかでなければならない.  オーダーが p - 1 のとき, 指数は, pの法の範囲を均等に分布し小さいサブセットを巡回することがない, 可能なすべての公開値を生成する.  このような生成器は "原始根" と呼ばれる （ｐが"安全"なときは容易に見つけられる).

   クライアントは, 適切なサイズを指定するサーバから法(modulus)を要求する.  以下の記述では, C はクライアント, S はサーバ, 法 p は大きく安全な素数, g は GF([)の部分群の生成器, min は クライアントが受容できる p のbitでの最小サイズ, n はクライアントがサーバから受け取りたい pのbitでの最小サイズ, max はクライアントが受容できるpのbitでの最大サイズ. V_S はＳのバージョン文字列, V_C は Cのバージョン文字列, K_S はホスト公開鍵, I_C は CのKEXINITメッセージ, Ｉ_S は SのKEXINITメッセージ (VS以降はこの部分が始まる前に交換されたもの)とする:

   1.  C は S に "min || n || max" を送り, 群のサイズの最小受容値と希望値, 最大値をbitで示す.

   2.  S はクライアントの要求に一番一致する群を見つけ C に "p || g" を送る.

   3.  C は 1 < x < (p-1)/2 な乱数 x を生成する.  e = g^x mod p を計算し "e" を S に送る.






Friedl, et al.              Standards Track                     [Page 2]
 
RFC 4419                 SSH DH Group Exchange                March 2006


   4.  S は 0 < y < (p-1)/2 な乱数 y を生成し f = g^y mod p を計算する.  S は "e" を受信する.  K = e^y mod p と H = hash(V_C || V_S || I_C || I_S || K_S || min || n || max || p || g || e || f || K) (これらの要素はタイプに従ってエンコードされている. 以下を参照) を計算し, ホスト秘密鍵で H に署名し s を得る.  S は "K_S || f || s"  を C に送る. 署名の操作は2つめのハッシュ操作を伴なうかもしれない.

   5.  C は, K_S が本当に S のホスト鍵かを検証する(例えば, 証明書や公開鍵を得られるローカルなデータベースを用いて).  C は, 鍵を検証無しで受け入れることもできる; しかし, そうするとプロトコルを能動的な攻撃に対して安全ではなくしてしまう (しかし, 多くの環境で短い期間実際的な理由から望まれている).  そして C は K = f^x mod p と H = hash(V_C || V_S || I_C || I_S || K_S || e || f || K)を計算し H に対する署名 s を検証する.

   サーバとクライアントは, 法の長さ k が1024 <= k <= 8192 である群をサポートする必要がある.  min と max の推奨値はそれぞれ 1024 と 8192 だ.

   どちらの側も [1, p-1]の範囲にない e や f の値を送ったり受け入れたりしてはならない.  この条件に違反したら, 鍵交換は失敗する.  限定攻撃(confinement attack) を防ぐため, 共有の秘密 K は 1 < K < p-1 のものだけ受け入れなければならない.

   サーバは, サーバが持っている群の中でクライアントが要求したサイズよりも大きいもののうちもっとも小さいサイズの群を返す必要がある.  もしクライアントが要求するよりも大きな群をサーバが持っていなければ, 持っている一番大きな群を返す必要がある.  すべての場合で, 少なくとも 1024 bit のサイズの群を返す必要がある.

   これは, 次のメッセージ群で実装される.  交換ハッシュを計算するハッシュ関数は, 方法の名前で定義される. これを HASH と呼ぶ.  署名に用いる公開鍵アルゴリズムは, KEXINIT メッセージで取り決める.

   まず, クライアントは以下を送る:

     byte    SSH_MSG_KEY_DH_GEX_REQUEST
     uint32  min, minimal size in bits of an acceptable group
     uint32  n, preferred size in bits of the group the server will send
     uint32  max, maximal size in bits of an acceptable group








Friedl, et al.              Standards Track                     [Page 3]
 
RFC 4419                 SSH DH Group Exchange                March 2006


   サーバは以下で応答する:

     byte    SSH_MSG_KEX_DH_GEX_GROUP
     mpint   p, safe prime
     mpint   g, generator for subgroup in GF(p)

   クライアントは以下で応答するThe client responds with:

     byte    SSH_MSG_KEX_DH_GEX_INIT
     mpint   e

   サーバは以下で応答する.

     byte    SSH_MSG_KEX_DH_GEX_REPLY
     string  server public host key and certificates (K_S)
     mpint   f
     string  signature of H

   ハッシュ H は, 次の連結に対する HASH の結果だ:

     string  V_C, the client's version string (CR and NL excluded)
     string  V_S, the server's version string (CR and NL excluded)
     string  I_C, the payload of the client's SSH_MSG_KEXINIT
     string  I_S, the payload of the server's SSH_MSG_KEXINIT
     string  K_S, the host key
     uint32  min, minimal size in bits of an acceptable group
     uint32  n, preferred size in bits of the group the server will send
     uint32  max, maximal size in bits of an acceptable group
     mpint   p, safe prime
     mpint   g, generator for subgroup
     mpint   e, exchange value sent by the client
     mpint   f, exchange value sent by the server
     mpint   K, the shared secret

   This value is called the exchange hash, and it is used to
   authenticate the key exchange as per [RFC4253].

4.  鍵交換法

   This document defines two new key exchange methods:
   "diffie-hellman-group-exchange-sha1" and
   "diffie-hellman-group-exchange-sha256".








Friedl, et al.              Standards Track                     [Page 4]
 
RFC 4419                 SSH DH Group Exchange                March 2006


4.1.  diffie-hellman-group-exchange-sha1

   The "diffie-hellman-group-exchange-sha1" method specifies
   Diffie-Hellman Group and Key Exchange with SHA-1 [FIPS-180-2] as
   HASH.

4.2.  diffie-hellman-group-exchange-sha256

   The "diffie-hellman-group-exchange-sha256" method specifies
   Diffie-Hellman Group and Key Exchange with SHA-256 [FIPS-180-2] as
   HASH.

   Note that the hash used in key exchange (in this case, SHA-256) must
   also be used in the key derivation pseudo-random function (PRF), as
   per the requirement in the "Output from Key Exchange" section in
   [RFC4253].

5.  メッセージ番号のまとめ

   The following message numbers have been defined in this document.
   They are in a name space private to this document and not assigned by
   IANA.

     #define SSH_MSG_KEX_DH_GEX_REQUEST_OLD  30
     #define SSH_MSG_KEX_DH_GEX_REQUEST      34
     #define SSH_MSG_KEX_DH_GEX_GROUP        31
     #define SSH_MSG_KEX_DH_GEX_INIT         32
     #define SSH_MSG_KEX_DH_GEX_REPLY        33

   SSH_MSG_KEX_DH_GEX_REQUEST_OLD is used for backward compatibility.
   Instead of sending "min || n || max", the client only sends "n".  In
   addition, the hash is calculated using only "n" instead of "min || n
   || max".

   The numbers 30-49 are key exchange specific and may be redefined by
   other kex methods.

6.  実装上の注意

6.1.  Choice of Generator

   One useful technique is to select the generator, and then limit the
   modulus selection sieve to primes with that generator:

      2   when p (mod 24) = 11.
      5   when p (mod 10) = 3 or 7.





Friedl, et al.              Standards Track                     [Page 5]
 
RFC 4419                 SSH DH Group Exchange                March 2006


   It is recommended to use 2 as generator, because it improves
   efficiency in multiplication performance.  It is usable even when it
   is not a primitive root, as it still covers half of the space of
   possible residues.

6.2.  Private Exponents

   To increase the speed of the key exchange, both client and server may
   reduce the size of their private exponents.  It should be at least
   twice as long as the key material that is generated from the shared
   secret.  For more details, see the paper by van Oorschot and Wiener
   [VAN-OORSCHOT].

7.  セキュリティの考察

   This protocol aims to be simple and uses only well-understood
   primitives.  This encourages acceptance by the community and allows
   for ease of implementation, which hopefully leads to a more secure
   system.

   The use of multiple moduli inhibits a determined attacker from
   precalculating moduli exchange values, and discourages dedication of
   resources for analysis of any particular modulus.

   It is important to employ only safe primes as moduli, as they allow
   us to find a generator g so that the order of the generated subgroup
   does not factor into small primes, that is, with p = 2q + 1, the
   order has to be either q or p - 1.  If the order is p - 1, then the
   exponents generate all possible public values, evenly distributed
   throughout the range of the modulus p, without cycling through a
   smaller subset.  Van Oorshot and Wiener note that using short private
   exponents with a random prime modulus p makes the computation of the
   discrete logarithm easy [VAN-OORSCHOT].  However, they also state
   that this problem does not apply to safe primes.

   The least significant bit of the private exponent can be recovered
   when the modulus is a safe prime [MENEZES].  However, this is not a
   problem if the size of the private exponent is big enough.  Related
   to this, Waldvogel and Massey note: When private exponents are chosen
   independently and uniformly at random from {0,...,p-2}, the key
   entropy is less than 2 bits away from the maximum, lg(p-1)
   [WALDVOGEL].

   The security considerations in [RFC4251] also apply to this key
   exchange method.






Friedl, et al.              Standards Track                     [Page 6]
 
RFC 4419                 SSH DH Group Exchange                March 2006


8.  Acknowledgements

   The document is derived in part from "SSH Transport Layer Protocol"
   [RFC4253] by T. Ylonen, T. Kivinen, M. Saarinen, T.  Rinne, and S.
   Lehtinen.

   Markku-Juhani Saarinen pointed out that the least significant bit of
   the private exponent can be recovered efficiently when using safe
   primes and a subgroup with an order divisible by two.

   Bodo Moeller suggested that the server send only one group, reducing
   the complexity of the implementation and the amount of data that
   needs to be exchanged between client and server.






































Friedl, et al.              Standards Track                     [Page 7]
 
RFC 4419                 SSH DH Group Exchange                March 2006


Appendix A:  Generation of Safe Primes

   The "Handbook of Applied Cryptography" [MENEZES] lists the following
   algorithm to generate a k-bit safe prime p.  It has been modified so
   that 2 is a generator for the multiplicative group mod p.

   1.  Do the following:

       1.  Select a random (k-1)-bit prime q, so that q mod 12 = 5.

       2.  Compute p := 2q + 1, and test whether p is prime (using,
           e.g., trial division and the Rabin-Miller test).

   2.  Repeat until p is prime.

   If an implementation uses the OpenSSL libraries, a group consisting
   of a 1024-bit safe prime and 2 as generator can be created as
   follows:

       DH *d = NULL;
       d = DH_generate_parameters(1024, DH_GENERATOR_2, NULL, NULL);
       BN_print_fp(stdout, d->p);

   The order of the subgroup generated by 2 is q = p - 1.

References

Normative References

   [FIPS-180-2]   National Institute of Standards and Technology (NIST),
                  "Secure Hash Standard (SHS)", FIPS PUB 180-2,
                  August 2002.

   [RFC4251]      Ylonen, T. and C. Lonvick, "The Secure Shell (SSH)
                  Protocol Architecture", RFC 4251, January 2006.

   [RFC4253]      Lonvick, C., "The Secure Shell (SSH) Transport Layer
                  Protocol", RFC 4253, January 2006.

   [RFC2119]      Bradner, S., "Key words for use in RFCs to Indicate
                  Requirement Levels", BCP 14, RFC 2119, March 1997.

Informative References

   [MENEZES]      Menezes, A., van Oorschot, P., and S. Vanstone,
                  "Handbook of Applied Cryptography", CRC Press, p. 537,
                  1996.




Friedl, et al.              Standards Track                     [Page 8]
 
RFC 4419                 SSH DH Group Exchange                March 2006


   [VAN-OORSCHOT] van Oorschot, P. and M. Wiener, "On Diffie-Hellman key
                  agreement with short exponents", Advances in
                  Cryptology -EUROCRYPT'96, LNCS 1070,
                  Springer-Verlag, pp. 332-343, 1996.

   [WALDVOGEL]    Waldvogel, C. and J. Massey, "The probability
                  distribution of the Diffie-Hellman key", Proceedings
                  of AUSCRYPT 92, LNCS 718, Springer-Verlag, pp.
                  492-504, 1993.

Authors' Addresses

   Markus Friedl
   EMail: markus@openbsd.org


   Niels Provos
   EMail: provos@citi.umich.edu


   William A. Simpson
   EMail: wsimpson@greendragon.com





























Friedl, et al.              Standards Track                     [Page 9]
 
RFC 4419                 SSH DH Group Exchange                March 2006


Full Copyright Statement

   Copyright (C) The Internet Society (2006). 訳者: 春山 征吾 <haruyama@unixuser.org> 

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.

Acknowledgement

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).







Friedl, et al.              Standards Track                    [Page 10]

